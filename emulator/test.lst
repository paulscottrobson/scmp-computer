 AS V1.42 Beta [Bld 115] - source file test.asm - page 1 - 16/11/2017 22:28:00


       1/       0 :                     ; ***********************************************************************************************
       2/       0 :                     ;
       3/       0 :                     ;											Bootloader
       4/       0 :                     ;											==========
       5/       0 :                     ;
       6/       0 :                     ;		A very primitive (84 byte) monitor to be entered initially. When run it starts at
       7/       0 :                     ;		address $0060 which is shown on the display (in binary).
       8/       0 :                     ;
       9/       0 :                     ;		Pressing either '1' or 'C' shows the memory contents when the key is pressed, and
      10/       0 :                     ;		advances to the next slot. 'C' is for copy, which copies the toggle into the 
      11/       0 :                     ;		memory address just displayed.
      12/       0 :                     ;	
      13/       0 :                     ;		Pressing C+1 together runs the program from $0060 (e.g. the first instruction is
      14/       0 :                     ;		there)
      15/       0 :                     ;
      16/       0 :                     ; ***********************************************************************************************
      17/       0 :                     
      18/       0 :                     	cpu 	sc/mp
      19/       0 :                     
      20/       0 :                     bootloader:
      21/       0 : 08                  	nop 
      22/       1 : C5 60               	ld 		@0x60(p1)							; start at $0060
      23/       3 :                     __currentAddressX1:	
      24/       3 : 31                  	xpal 	p1 									; get P1.L
      25/       4 : 01                  	xae 										; put into E
      26/       5 : 40                  	lde 										; copy back into P1.L
      27/       6 : 31                  	xpal 	p1
      28/       7 :                     ;
      29/       7 :                     ;	Refresh the display with the value in E
      30/       7 :                     ;
      31/       7 :                     refreshDisplayWithE:	
      32/       7 : C4 02               	ldi 	0x02 								; put first character to send ($02, 'C') in P3.H
      33/       9 : 37                  	xpah 	p3
      34/       A : C4 09               	ldi 	9 									; chars to send in P3.L
      35/       C :                     refreshDisplayOnceIfACZero:	
      36/       C : DC 01               	ori 	1
      37/       E :                     writeKeystroke:									; write the next keystroke
      38/       E : 33                  	xpal 	p3 									; put back in P3.L counter.
      39/       F : 01                  	xae 										; wait for D8
      40/      10 : 19                  	sio
      41/      11 : 01                  	xae
      42/      12 : 94 FA               	jp 		writeKeyStroke
      43/      14 : 8F 00               	dly 	00									; short delay in.
      44/      16 :                     
      45/      16 : 06                  	csa 										; get status of SA/SB
      46/      17 : D4 30               	ani 	0x30
      47/      19 : 32                  	xpal 	p2 									; put in P2.L
      48/      1A :                     
      49/      1A : 37                  	xpah 	p3 									; recover character to transmit
      50/      1B : 94 04               	jp 		notD0 								; if +ve, don't skip to D0
      51/      1D : 37                  	xpah 	p3 									; save back
      52/      1E : 8F 18               	dly 	03*8 								; skip to D8
      53/      20 : 37                  	xpah 	p3 									; restore.
      54/      21 :                     notD0:
      55/      21 : 07                  	cas 										; write to F0/F1.
      56/      22 :                     
      57/      22 : 8F 03               	dly 	03 									; wait till next scan position.
      58/      24 : C4 00               	ldi 	0 									; clear F0, F1 and CY/L.	
      59/      26 : 07                  	cas 
      60/      27 :                     
 AS V1.42 Beta [Bld 115] - source file test.asm - page 2 - 16/11/2017 22:28:00


      61/      27 : 40                  	lde 										; shift E left into CY/L
      62/      28 : 70                  	ade
      63/      29 : 01                  	xae
      64/      2A :                     
      65/      2A : 06                  	csa 										; get SR
      66/      2B : D4 80               	ani 	0x80 								; now $00 (NC) $80 (C)
      67/      2D : F4 01               	adi 	0x01 								; now $01 (NC) $82 (C)
      68/      2F : E4 83               	xri 	0x83 								; switch them round.
      69/      31 : 37                  	xpah 	p3 									; put in character to write.
      70/      32 :                     
      71/      32 : C7 FF               	ld 		@-1(p3) 							; decrement counter
      72/      34 : 33                  	xpal 	p3 									; check it.
      73/      35 : 9C D7               	jnz 	writeKeystroke 						; go do the next keystroke.
      74/      37 : 37                  	xpah 	p3 									; zero 'to write' in P3.H now.
      75/      38 :                     
      76/      38 : 32                  	xpal 	p2 									; get key press value from P2.L
      77/      39 : 01                  	xae 										; put in E.
      78/      3A :                     __lastKeyStatusX1:
      79/      3A : C4 00               	ldi 	00									; get last key pressed
      80/      3C : 60                  	xre 										; has it changed ?
      81/      3D : 98 CD               	jz  	refreshDisplayOnceIfAcZero			; if not, keep scanning the keyboard.
      82/      3F :                     
      83/      3F : 40                  	lde 										; get the value from the keyboard.
      84/      40 : C8 FA               	st 		__lastKeyStatusX1+1 				; update the last key status.
      85/      42 : 98 BF               	jz 		__currentAddressX1 					; if released display current address.
      86/      44 :                     
      87/      44 : E4 30               	xri 	0x30 								; invert bits, so if both keys pressed
      88/      46 : 98 18               	jz 		0x60 								; will be zero, and run from $0060 if so.
      89/      48 :                     
      90/      48 : D4 20               	ani 	0x20 								; was SB pressed (e.g. 'C')
      91/      4A : 9C 04               	jnz 	advance 							; if not, it was '1' which is advance only
      92/      4C :                     
      93/      4C :                     												; pressing 0 copies the toggles in.
      94/      4C : C0 B2               	ld 		0xFFF 								; read keyboard toggles
      95/      4E : C9 00               	st 		(p1) 								; and save at current address
      96/      50 :                     
      97/      50 :                     advance:
      98/      50 : C5 01               	ld 		@1(p1) 								; read the byte there and bump P1.
      99/      52 : 01                  	xae 										; into E
     100/      53 : 90 B2               	jmp 	refreshDisplayWithE 				; display that
     101/      55 :                     
     102/      55 :                     
 AS V1.42 Beta [Bld 115] - source file test.asm - page 3 - 16/11/2017 22:28:00


  symbol table (* = unused):
  ------------------------

 ADVANCE :                       50 C |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
*BIGENDIAN :                      0 - | *BOOTLOADER :                     0 C |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                  16/11/2017 - |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                         C - |
*MOMCPUNAME :                 SC/MP - | *NESTMAX :                      100 - |
 NOTD0 :                         21 C | *PACKING :                        0 - |
*PADDING :                        1 - |  REFRESHDISPLAYONCEIFACZERO :     C C |
 REFRESHDISPLAYWITHE :            7 C | *RELAXED :                        0 - |
*TIME :                    22:28:00 - | *TRUE :                           1 - |
*VERSION :                     142F - |  WRITEKEYSTROKE :                 E C |
 __CURRENTADDRESSX1 :             3 C |  __LASTKEYSTATUSX1 :             3A C |

     36 symbols
     29 unused symbols

 AS V1.42 Beta [Bld 115] - source file test.asm - page 4 - 16/11/2017 22:28:00


  codepages:
  ----------

STANDARD (0 changed characters)


0.00 seconds assembly time

    102 lines source file
      2 passes
      0 errors
      0 warnings
